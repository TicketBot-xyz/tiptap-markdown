{"version":3,"file":"tiptap-markdown.umd.js","sources":["../src/extensions/tiptap/tight-lists.js","../src/util/markdown.js","../src/serialize/state.js","../src/extensions/marks/html.js","../src/util/dom.js","../src/extensions/nodes/html.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/index.js","../src/util/extensions.js","../src/serialize/MarkdownSerializer.js","../src/parse/MarkdownParser.js","../src/extensions/tiptap/clipboard.js","../src/Markdown.js"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\r\n\r\nexport const MarkdownTightLists = Extension.create({\r\n    name: 'markdownTightLists',\r\n    addOptions: () => ({\r\n        tight: true,\r\n        tightClass: 'tight',\r\n        listTypes: [\r\n            'bulletList',\r\n            'orderedList',\r\n        ],\r\n    }),\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.listTypes,\r\n                attributes: {\r\n                    tight: {\r\n                        default: this.options.tight,\r\n                        parseHTML: element =>\r\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\r\n                        renderHTML: attributes => ({\r\n                            class: attributes.tight ? this.options.tightClass : null,\r\n                            'data-tight': attributes.tight ? 'true' : null,\r\n                        }),\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleTight: (tight = null) => ({ editor, commands }) => {\r\n                function toggleTight(name) {\r\n                    if(!editor.isActive(name)) {\r\n                        return false;\r\n                    }\r\n                    const attrs = editor.getAttributes(name);\r\n                    return commands.updateAttributes(name, {\r\n                        tight: tight ?? !attrs?.tight,\r\n                    });\r\n                }\r\n                return this.options.listTypes\r\n                    .some(name => toggleTight(name));\r\n            }\r\n        }\r\n    },\r\n});\r\n","import markdownit from 'markdown-it';\r\n\r\nconst md = markdownit();\r\n\r\nfunction scanDelims(text, pos) {\r\n    md.inline.State.prototype.scanDelims.call({ src: text, posMax: text.length })\r\n    const state = new (md.inline.State)(text, null, null, []);\r\n    return state.scanDelims(pos, true);\r\n}\r\n\r\nexport function shiftDelim(text, delim, start, offset) {\r\n    let res = text.substring(0, start) + text.substring(start + delim.length);\r\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\r\n    return res;\r\n}\r\n\r\nfunction trimStart(text, delim, from, to) {\r\n    let pos = from, res = text;\r\n    while(pos < to) {\r\n        if(scanDelims(res, pos).can_open) {\r\n            break;\r\n        }\r\n        res = shiftDelim(res, delim, pos, 1);\r\n        pos++;\r\n    }\r\n    return { text: res, from: pos, to }\r\n}\r\n\r\nfunction trimEnd(text, delim, from, to) {\r\n    let pos = to, res = text;\r\n    while(pos > from) {\r\n        if(scanDelims(res, pos).can_close) {\r\n            break;\r\n        }\r\n        res = shiftDelim(res, delim, pos, -1);\r\n        pos--;\r\n    }\r\n    return { text: res, from, to: pos }\r\n}\r\n\r\nexport function trimInline(text, delim, from, to) {\r\n    let state = {\r\n        text,\r\n        from,\r\n        to,\r\n    }\r\n\r\n    state = trimStart(state.text, delim, state.from, state.to);\r\n    state = trimEnd(state.text, delim, state.from, state.to);\r\n\r\n    if(state.to - state.from < delim.length + 1) {\r\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\r\n    }\r\n\r\n    return state.text;\r\n}\r\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\r\nimport { trimInline } from \"../util/markdown\";\r\n\r\n\r\n/**\r\n * Override default MarkdownSerializerState to:\r\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\r\n */\r\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\r\n\r\n    constructor(nodes, marks, options) {\r\n        super(nodes, marks, options ?? {});\r\n        this.inlines = [];\r\n    }\r\n\r\n    render(node, parent, index) {\r\n        super.render(node, parent, index);\r\n        const top = this.inlines[this.inlines.length - 1];\r\n        if(top?.start && top?.end) {\r\n            const { delimiter, start, end } = this.normalizeInline(top);\r\n            this.out = trimInline(this.out, delimiter, start, end);\r\n            this.inlines.pop();\r\n        }\r\n    }\r\n\r\n    markString(mark, open, parent, index) {\r\n        const info = this.marks[mark.type.name]\r\n        if(info.expelEnclosingWhitespace) {\r\n            if(open) {\r\n                this.inlines.push({\r\n                    start: this.out.length,\r\n                    delimiter: info.open,\r\n                });\r\n            } else {\r\n                const top = this.inlines.pop();\r\n                this.inlines.push({\r\n                    ...top,\r\n                    end: this.out.length,\r\n                });\r\n            }\r\n        }\r\n        return super.markString(mark, open, parent, index);\r\n    }\r\n\r\n    normalizeInline(inline) {\r\n        let { start, end } = inline;\r\n        while(this.out.charAt(start).match(/\\s/)) {\r\n            start++;\r\n        }\r\n        return {\r\n            ...inline,\r\n            start,\r\n        }\r\n    }\r\n}\r\n","import { Fragment } from \"@tiptap/pm/model\";\r\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\r\n\r\n\r\nexport default Mark.create({\r\n    name: 'markdownHTMLMark',\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {\r\n                    open(state, mark)  {\r\n                        if(!this.editor.storage.markdown.options.html) {\r\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\r\n                            return '';\r\n                        }\r\n                        return getMarkTags(mark)?.[0] ?? '';\r\n                    },\r\n                    close(state, mark) {\r\n                        if(!this.editor.storage.markdown.options.html) {\r\n                            return '';\r\n                        }\r\n                        return getMarkTags(mark)?.[1] ?? '';\r\n                    },\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nfunction getMarkTags(mark) {\r\n    const schema = mark.type.schema;\r\n    const node = schema.text(' ', [mark]);\r\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\r\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\r\n    return match ? [match[1], match[2]] : null;\r\n}\r\n","\r\n\r\nexport function elementFromString(value) {\r\n    // add a wrapper to preserve leading and trailing whitespace\r\n    const wrappedValue = `<body>${value}</body>`\r\n\r\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\r\n}\r\n\r\nexport function escapeHTML(value) {\r\n    return value\r\n        ?.replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\n\r\nexport function extractElement(node) {\r\n    const parent = node.parentElement;\r\n    const prepend = parent.cloneNode();\r\n\r\n    while(parent.firstChild && parent.firstChild !== node) {\r\n        prepend.appendChild(parent.firstChild);\r\n    }\r\n\r\n    if(prepend.childNodes.length > 0) {\r\n        parent.parentElement.insertBefore(prepend, parent);\r\n    }\r\n    parent.parentElement.insertBefore(node, parent);\r\n    if(parent.childNodes.length === 0) {\r\n        parent.remove();\r\n    }\r\n}\r\n\r\nexport function unwrapElement(node) {\r\n    const parent = node.parentNode;\r\n\r\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\r\n\r\n    parent.removeChild(node);\r\n}\r\n","import { Fragment } from \"@tiptap/pm/model\";\r\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\r\nimport { elementFromString } from \"../../util/dom\";\r\n\r\n\r\nexport default Node.create({\r\n    name: 'markdownHTMLNode',\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent) {\r\n                    if(this.editor.storage.markdown.options.html) {\r\n                        state.write(serializeHTML(node, parent));\r\n                    } else {\r\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\r\n                        state.write(`[${node.type.name}]`);\r\n                    }\r\n                    if(node.isBlock) {\r\n                        state.closeBlock(node);\r\n                    }\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n\r\nfunction serializeHTML(node, parent) {\r\n    const schema = node.type.schema;\r\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\r\n\r\n    if(node.isBlock && (parent instanceof Fragment || parent.type.name === schema.topNodeType.name)) {\r\n        return formatBlock(html);\r\n    }\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * format html block as per the commonmark spec\r\n */\r\nfunction formatBlock(html) {\r\n    const dom = elementFromString(html);\r\n    const element = dom.firstElementChild;\r\n\r\n    element.innerHTML = element.innerHTML.trim()\r\n        ? `\\n${element.innerHTML}\\n`\r\n        : `\\n`;\r\n\r\n    return element.outerHTML;\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Blockquote = Node.create({\r\n    name: 'blockquote',\r\n});\r\n\r\nexport default Blockquote.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst BulletList = Node.create({\r\n    name: 'bulletList',\r\n});\r\n\r\nexport default BulletList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst CodeBlock = Node.create({\r\n    name: 'codeBlock',\r\n});\r\n\r\nexport default CodeBlock.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\r\n                    state.text(node.textContent, false);\r\n                    state.ensureNewLine();\r\n                    state.write(\"```\");\r\n                    state.closeBlock(node);\r\n                },\r\n                parse: {\r\n                    setup(markdownit) {\r\n                        markdownit.set({\r\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\r\n                        });\r\n                    },\r\n                    updateDOM(element) {\r\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst HardBreak = Node.create({\r\n    name: 'hardBreak',\r\n});\r\n\r\nexport default HardBreak.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.hard_break,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Heading = Node.create({\r\n    name: 'heading',\r\n});\r\n\r\nexport default Heading.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.heading,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst HorizontalRule = Node.create({\r\n    name: 'horizontalRule',\r\n});\r\n\r\nexport default HorizontalRule.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Image = Node.create({\r\n    name: 'image',\r\n});\r\n\r\nexport default Image.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.image,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst ListItem = Node.create({\r\n    name: 'listItem',\r\n});\r\n\r\nexport default ListItem.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.list_item,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst OrderedList = Node.create({\r\n    name: 'orderedList',\r\n});\r\n\r\nexport default OrderedList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.ordered_list,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Paragraph = Node.create({\r\n    name: 'paragraph',\r\n});\r\n\r\nexport default Paragraph.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","\r\n\r\nexport function childNodes(node) {\r\n    return node?.content?.content ?? [];\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\nimport { childNodes } from \"../../util/prosemirror\";\r\nimport HTMLNode from './html';\r\n\r\nconst Table = Node.create({\r\n    name: 'table',\r\n});\r\n\r\nexport default Table.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent) {\r\n                    if(!isMarkdownSerializable(node)) {\r\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\r\n                        return;\r\n                    }\r\n                    node.forEach((row, p, i) => {\r\n                        state.write('| ');\r\n                        row.forEach((col, p, j) => {\r\n                            if(j) {\r\n                                state.write(' | ');\r\n                            }\r\n                            const cellContent = col.firstChild;\r\n                            if(cellContent.textContent.trim()) {\r\n                                state.renderInline(cellContent);\r\n                            }\r\n                        });\r\n                        state.write(' |')\r\n                        state.ensureNewLine();\r\n                        if(!i) {\r\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\r\n                            state.write(`| ${delimiterRow} |`);\r\n                            state.ensureNewLine();\r\n                        }\r\n                    });\r\n                    state.closeBlock(node);\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\nfunction hasSpan(node) {\r\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\r\n}\r\n\r\nfunction isMarkdownSerializable(node) {\r\n    const rows = childNodes(node);\r\n    const firstRow = rows[0];\r\n    const bodyRows = rows.slice(1);\r\n\r\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell) || cell.childCount > 1)) {\r\n        return false;\r\n    }\r\n\r\n    if(bodyRows.some(row =>\r\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell) || cell.childCount > 1)\r\n    )) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst TaskItem = Node.create({\r\n    name: 'taskItem',\r\n});\r\n\r\nexport default TaskItem.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\r\n                    state.write(`${check} `);\r\n                    state.renderContent(node);\r\n                },\r\n                parse: {\r\n                    updateDOM(element) {\r\n                        [...element.querySelectorAll('.task-list-item')]\r\n                            .forEach(item => {\r\n                                const input = item.querySelector('input');\r\n                                item.setAttribute('data-type', 'taskItem');\r\n                                if(input) {\r\n                                    item.setAttribute('data-checked', input.checked);\r\n                                    input.remove();\r\n                                }\r\n                            });\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import taskListPlugin from \"markdown-it-task-lists\";\r\nimport { Node } from \"@tiptap/core\";\r\nimport BulletList from \"./bullet-list\";\r\n\r\n\r\nconst TaskList = Node.create({\r\n    name: 'taskList',\r\n});\r\n\r\nexport default TaskList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: BulletList.storage.markdown.serialize,\r\n                parse: {\r\n                    setup(markdownit) {\r\n                        markdownit.use(taskListPlugin);\r\n                    },\r\n                    updateDOM(element) {\r\n                        [...element.querySelectorAll('.contains-task-list')]\r\n                            .forEach(list => {\r\n                                list.setAttribute('data-type', 'taskList');\r\n                            });\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { escapeHTML } from \"../../util/dom\";\r\n\r\n\r\nconst Text = Node.create({\r\n    name: 'text',\r\n});\r\n\r\nexport default Text.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    state.text(escapeHTML(node.text));\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Bold = Mark.create({\r\n    name: 'bold',\r\n});\r\n\r\nexport default Bold.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.strong,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            },\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Code = Mark.create({\r\n    name: 'code',\r\n});\r\n\r\nexport default Code.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.code,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Italic = Mark.create({\r\n    name: 'italic',\r\n});\r\n\r\nexport default Italic.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.em,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Link = Mark.create({\r\n    name: 'link',\r\n});\r\n\r\nexport default Link.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.link,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\n\r\n\r\nconst Strike = Mark.create({\r\n    name: 'strike',\r\n});\r\n\r\nexport default Strike.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","import Blockquote from \"./nodes/blockquote\";\r\nimport BulletList from \"./nodes/bullet-list\";\r\nimport CodeBlock from \"./nodes/code-block\";\r\nimport HardBreak from \"./nodes/hard-break\";\r\nimport Heading from \"./nodes/heading\";\r\nimport HorizontalRule from \"./nodes/horizontal-rule\";\r\nimport HTMLNode from \"./nodes/html\";\r\nimport Image from \"./nodes/image\";\r\nimport ListItem from \"./nodes/list-item\";\r\nimport OrderedList from \"./nodes/ordered-list\";\r\nimport Paragraph from \"./nodes/paragraph\";\r\nimport Table from \"./nodes/table\";\r\nimport TaskItem from \"./nodes/task-item\";\r\nimport TaskList from \"./nodes/task-list\";\r\nimport Text from \"./nodes/text\";\r\n\r\nimport Bold from \"./marks/bold\";\r\nimport Code from \"./marks/code\";\r\nimport HTMLMark from \"./marks/html\";\r\nimport Italic from \"./marks/italic\";\r\nimport Link from \"./marks/link\";\r\nimport Strike from \"./marks/strike\";\r\n\r\n\r\nexport default [\r\n    Blockquote,\r\n    BulletList,\r\n    CodeBlock,\r\n    HardBreak,\r\n    Heading,\r\n    HorizontalRule,\r\n    HTMLNode,\r\n    Image,\r\n    ListItem,\r\n    OrderedList,\r\n    Paragraph,\r\n    Table,\r\n    TaskItem,\r\n    TaskList,\r\n    Text,\r\n\r\n    Bold,\r\n    Code,\r\n    HTMLMark,\r\n    Italic,\r\n    Link,\r\n    Strike,\r\n]\r\n","import markdownExtensions from \"../extensions\";\r\n\r\n\r\nexport function getMarkdownSpec(extension) {\r\n    const markdownSpec = extension.storage?.markdown;\r\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\r\n\r\n    if(markdownSpec || defaultMarkdownSpec) {\r\n        return {\r\n            ...defaultMarkdownSpec,\r\n            ...markdownSpec,\r\n        };\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { MarkdownSerializerState } from './state';\r\nimport HTMLMark from \"../extensions/marks/html\";\r\nimport HTMLNode from \"../extensions/nodes/html\";\r\nimport { getMarkdownSpec } from \"../util/extensions\";\r\nimport HardBreak from \"../extensions/nodes/hard-break\";\r\n\r\n\r\nexport class MarkdownSerializer {\r\n    /**\r\n     * @type {import('@tiptap/core').Editor}\r\n     */\r\n    editor = null;\r\n\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    serialize(content) {\r\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\r\n            hardBreakNodeName: HardBreak.name,\r\n        });\r\n\r\n        state.renderContent(content);\r\n\r\n        return state.out;\r\n    }\r\n\r\n    get nodes() {\r\n        return {\r\n            ...Object.fromEntries(\r\n                Object.keys(this.editor.schema.nodes)\r\n                    .map(name => [name, this.serializeNode(HTMLNode)])\r\n            ),\r\n            ...Object.fromEntries(\r\n                this.editor.extensionManager.extensions\r\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\r\n                    .map(extension => [extension.name, this.serializeNode(extension)])\r\n                ?? []\r\n            ),\r\n        };\r\n    }\r\n\r\n    get marks() {\r\n        return {\r\n            ...Object.fromEntries(\r\n                Object.keys(this.editor.schema.marks)\r\n                    .map(name => [name, this.serializeMark(HTMLMark)])\r\n            ),\r\n            ...Object.fromEntries(\r\n                this.editor.extensionManager.extensions\r\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\r\n                    .map(extension => [extension.name, this.serializeMark(extension)])\r\n                ?? []\r\n            ),\r\n        };\r\n    }\r\n\r\n    serializeNode(node) {\r\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\r\n    }\r\n\r\n    serializeMark(mark) {\r\n        const serialize = getMarkdownSpec(mark)?.serialize;\r\n        return serialize\r\n            ? {\r\n                ...serialize,\r\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\r\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\r\n            }\r\n            : null\r\n    }\r\n}\r\n\r\n","import markdownit from \"markdown-it\";\r\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\r\nimport { getMarkdownSpec } from \"../util/extensions\";\r\n\r\n\r\nexport class MarkdownParser {\r\n    /**\r\n     * @type {import('@tiptap/core').Editor}\r\n     */\r\n    editor = null;\r\n    /**\r\n     * @type {markdownit}\r\n     */\r\n    md = null;\r\n\r\n    constructor(editor, { html, linkify, breaks }) {\r\n        this.editor = editor;\r\n        this.md = markdownit({\r\n            html,\r\n            linkify,\r\n            breaks,\r\n        });\r\n    }\r\n\r\n    parse(content, { inline } = {}) {\r\n        if(typeof content === 'string') {\r\n            const renderer = this.md;\r\n\r\n            this.editor.extensionManager.extensions.forEach(extension =>\r\n                getMarkdownSpec(extension)?.parse?.setup?.call({ editor:this.editor, options:extension.options }, renderer)\r\n            );\r\n\r\n            const renderedHTML = renderer.render(content);\r\n            const element = elementFromString(renderedHTML);\r\n\r\n            this.editor.extensionManager.extensions.forEach(extension =>\r\n                getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor:this.editor, options:extension.options }, element)\r\n            );\r\n\r\n            this.normalizeDOM(element, { inline, content });\r\n\r\n            return element.innerHTML;\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    normalizeDOM(node, { inline, content }) {\r\n        this.normalizeBlocks(node);\r\n\r\n        // remove all \\n appended by markdown-it\r\n        node.querySelectorAll('*').forEach(el => {\r\n            if(el.nextSibling?.nodeType === Node.TEXT_NODE && !el.closest('pre')) {\r\n                el.nextSibling.textContent = el.nextSibling.textContent.replace(/^\\n/, '');\r\n            }\r\n        });\r\n\r\n        if(inline) {\r\n            this.normalizeInline(node, content);\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    normalizeBlocks(node) {\r\n        const blocks = Object.values(this.editor.schema.nodes)\r\n            .filter(node => node.isBlock);\r\n\r\n        const selector = blocks\r\n            .map(block => block.spec.parseDOM?.map(spec => spec.tag))\r\n            .flat()\r\n            .filter(Boolean)\r\n            .join(',');\r\n\r\n        if(!selector) {\r\n            return;\r\n        }\r\n\r\n        [...node.querySelectorAll(selector)].forEach(el => {\r\n            if(el.parentElement.matches('p')) {\r\n                extractElement(el);\r\n            }\r\n        });\r\n    }\r\n\r\n    normalizeInline(node, content) {\r\n        if(node.firstElementChild?.matches('p')) {\r\n            const firstParagraph = node.firstElementChild;\r\n            const { nextSibling, nextElementSibling } = firstParagraph;\r\n            const startSpaces = content.match(/^\\s+/)?.[0] ?? '';\r\n            const endSpaces = !nextElementSibling\r\n                ? content.match(/\\s+$/)?.[0] ?? ''\r\n                : '';\r\n\r\n            if(content.match(/^\\n\\n/)) {\r\n                firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\r\n                return;\r\n            }\r\n\r\n            unwrapElement(firstParagraph);\r\n\r\n            node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\r\n        }\r\n    }\r\n}\r\n\r\n","import { Extension } from \"@tiptap/core\";\r\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\r\nimport { DOMParser } from '@tiptap/pm/model';\r\nimport { elementFromString } from \"../../util/dom\";\r\n\r\nexport const MarkdownClipboard = Extension.create({\r\n    name: 'markdownClipboard',\r\n    addOptions() {\r\n        return {\r\n            transformPastedText: false,\r\n            transformCopiedText: false,\r\n        }\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new Plugin({\r\n                key: new PluginKey('markdownClipboard'),\r\n                props: {\r\n                    clipboardTextParser: (text, context, plainText) => {\r\n                        if(plainText || !this.options.transformPastedText) {\r\n                            return null; // pasting with shift key prevents formatting\r\n                        }\r\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\r\n                        return DOMParser.fromSchema(this.editor.schema)\r\n                            .parseSlice(elementFromString(parsed), {\r\n                                preserveWhitespace: true,\r\n                                context,\r\n                            });\r\n                    },\r\n                    /**\r\n                     * @param {import('prosemirror-model').Slice} slice\r\n                     */\r\n                    clipboardTextSerializer: (slice) => {\r\n                        if(!this.options.transformCopiedText) {\r\n                            return null;\r\n                        }\r\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\r\n                    },\r\n                },\r\n            })\r\n        ]\r\n    }\r\n})\r\n","import { Extension, extensions } from '@tiptap/core';\r\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\r\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\r\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\r\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\r\n\r\nexport const Markdown = Extension.create({\r\n    name: 'markdown',\r\n    priority: 50,\r\n    addOptions() {\r\n        return {\r\n            html: true,\r\n            tightLists: true,\r\n            tightListClass: 'tight',\r\n            bulletListMarker: '-',\r\n            linkify: false,\r\n            breaks: false,\r\n            transformPastedText: false,\r\n            transformCopiedText: false,\r\n        }\r\n    },\r\n    addCommands() {\r\n        const commands = extensions.Commands.config.addCommands();\r\n        return {\r\n            setContent: (content, emitUpdate, parseOptions) => (props) => {\r\n                return commands.setContent(\r\n                    props.editor.storage.markdown.parser.parse(content),\r\n                    emitUpdate,\r\n                    parseOptions\r\n                )(props);\r\n            },\r\n            insertContentAt: (range, content, options) => (props) => {\r\n                return commands.insertContentAt(\r\n                    range,\r\n                    props.editor.storage.markdown.parser.parse(content, { inline: true }),\r\n                    options\r\n                )(props);\r\n            },\r\n        }\r\n    },\r\n    onBeforeCreate() {\r\n        this.editor.storage.markdown = {\r\n            options: { ...this.options },\r\n            parser: new MarkdownParser(this.editor, this.options),\r\n            serializer: new MarkdownSerializer(this.editor),\r\n            getMarkdown: () => {\r\n                return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\r\n            },\r\n        }\r\n        this.editor.options.initialContent = this.editor.options.content;\r\n        this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\r\n    },\r\n    onCreate() {\r\n        this.editor.options.content = this.editor.options.initialContent;\r\n        delete this.editor.options.initialContent;\r\n    },\r\n    addStorage() {\r\n        return {\r\n            /// storage will be defined in onBeforeCreate() to prevent initial object overriding\r\n        }\r\n    },\r\n    addExtensions() {\r\n        return [\r\n            MarkdownTightLists.configure({\r\n                tight: this.options.tightLists,\r\n                tightClass: this.options.tightListClass,\r\n            }),\r\n            MarkdownClipboard.configure({\r\n                transformPastedText: this.options.transformPastedText,\r\n                transformCopiedText: this.options.transformCopiedText,\r\n            }),\r\n        ]\r\n    },\r\n});\r\n"],"names":["MarkdownTightLists","Extension","create","name","addOptions","tight","tightClass","listTypes","addGlobalAttributes","types","options","attributes","default","parseHTML","element","getAttribute","querySelector","renderHTML","class","addCommands","_this","toggleTight","arguments","length","undefined","_ref","editor","commands","isActive","attrs","getAttributes","updateAttributes","some","md","markdownit","scanDelims","text","pos","inline","State","prototype","call","src","posMax","state","shiftDelim","delim","start","offset","res","substring","trimStart","from","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","BaseMarkdownSerializerState","constructor","nodes","marks","inlines","render","node","parent","index","top","end","delimiter","normalizeInline","out","pop","markString","mark","open","info","type","expelEnclosingWhitespace","push","charAt","match","Mark","addStorage","markdown","serialize","_getMarkTags$","_getMarkTags","storage","html","console","warn","getMarkTags","close","_getMarkTags$2","_getMarkTags2","parse","schema","getHTMLFromFragment","Fragment","elementFromString","value","wrappedValue","window","DOMParser","parseFromString","body","escapeHTML","replace","extractElement","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","insertBefore","remove","unwrapElement","parentNode","removeChild","Node","write","serializeHTML","isBlock","closeBlock","topNodeType","formatBlock","dom","firstElementChild","innerHTML","trim","outerHTML","Blockquote","extend","defaultMarkdownSerializer","blockquote","BulletList","renderList","bulletListMarker","CodeBlock","language","textContent","ensureNewLine","setup","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","HardBreak","hard_break","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","ordered_list","Paragraph","paragraph","_node$content$content","_node$content","content","Table","isMarkdownSerializable","HTMLNode","forEach","row","p","i","col","j","cellContent","renderInline","delimiterRow","Array","childCount","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","slice","cell","TaskItem","check","checked","renderContent","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","strong","Code","code","Italic","em","Link","link","Strike","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownSerializer","hardBreakNodeName","_this$editor$extensio","Object","fromEntries","keys","serializeNode","extensionManager","extensions","filter","_this$editor$extensio2","serializeMark","_getMarkdownSpec","bind","_getMarkdownSpec2","MarkdownParser","linkify","breaks","renderer","renderedHTML","normalizeDOM","_ref2","normalizeBlocks","el","_el$nextSibling","nextSibling","nodeType","TEXT_NODE","closest","blocks","values","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextElementSibling","startSpaces","endSpaces","MarkdownClipboard","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","key","PluginKey","props","clipboardTextParser","context","plainText","parsed","parser","fromSchema","parseSlice","preserveWhitespace","clipboardTextSerializer","serializer","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}