{"version":3,"file":"tiptap-markdown.es.js","sources":["../src/extensions/tiptap/tight-lists.js","../src/util/markdown.js","../src/serialize/state.js","../src/extensions/marks/html.js","../src/util/dom.js","../src/extensions/nodes/html.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/marks/underline.js","../src/extensions/index.js","../src/util/extensions.js","../src/serialize/MarkdownSerializer.js","../src/parse/MarkdownParser.js","../src/extensions/tiptap/clipboard.js","../src/Markdown.js"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\r\n\r\nexport const MarkdownTightLists = Extension.create({\r\n    name: 'markdownTightLists',\r\n    addOptions: () => ({\r\n        tight: true,\r\n        tightClass: 'tight',\r\n        listTypes: [\r\n            'bulletList',\r\n            'orderedList',\r\n        ],\r\n    }),\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.listTypes,\r\n                attributes: {\r\n                    tight: {\r\n                        default: this.options.tight,\r\n                        parseHTML: element =>\r\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\r\n                        renderHTML: attributes => ({\r\n                            class: attributes.tight ? this.options.tightClass : null,\r\n                            'data-tight': attributes.tight ? 'true' : null,\r\n                        }),\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleTight: (tight = null) => ({ editor, commands }) => {\r\n                function toggleTight(name) {\r\n                    if(!editor.isActive(name)) {\r\n                        return false;\r\n                    }\r\n                    const attrs = editor.getAttributes(name);\r\n                    return commands.updateAttributes(name, {\r\n                        tight: tight ?? !attrs?.tight,\r\n                    });\r\n                }\r\n                return this.options.listTypes\r\n                    .some(name => toggleTight(name));\r\n            }\r\n        }\r\n    },\r\n});\r\n","import markdownit from 'markdown-it';\r\n\r\nconst md = markdownit();\r\n\r\nfunction scanDelims(text, pos) {\r\n    md.inline.State.prototype.scanDelims.call({ src: text, posMax: text.length })\r\n    const state = new (md.inline.State)(text, null, null, []);\r\n    return state.scanDelims(pos, true);\r\n}\r\n\r\nexport function shiftDelim(text, delim, start, offset) {\r\n    let res = text.substring(0, start) + text.substring(start + delim.length);\r\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\r\n    return res;\r\n}\r\n\r\nfunction trimStart(text, delim, from, to) {\r\n    let pos = from, res = text;\r\n    while(pos < to) {\r\n        if(scanDelims(res, pos).can_open) {\r\n            break;\r\n        }\r\n        res = shiftDelim(res, delim, pos, 1);\r\n        pos++;\r\n    }\r\n    return { text: res, from: pos, to }\r\n}\r\n\r\nfunction trimEnd(text, delim, from, to) {\r\n    let pos = to, res = text;\r\n    while(pos > from) {\r\n        if(scanDelims(res, pos).can_close) {\r\n            break;\r\n        }\r\n        res = shiftDelim(res, delim, pos, -1);\r\n        pos--;\r\n    }\r\n    return { text: res, from, to: pos }\r\n}\r\n\r\nexport function trimInline(text, delim, from, to) {\r\n    let state = {\r\n        text,\r\n        from,\r\n        to,\r\n    }\r\n\r\n    state = trimStart(state.text, delim, state.from, state.to);\r\n    state = trimEnd(state.text, delim, state.from, state.to);\r\n\r\n    if(state.to - state.from < delim.length + 1) {\r\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\r\n    }\r\n\r\n    return state.text;\r\n}\r\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\r\nimport { trimInline } from \"../util/markdown\";\r\n\r\n\r\n/**\r\n * Override default MarkdownSerializerState to:\r\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\r\n */\r\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\r\n\r\n    constructor(nodes, marks, options) {\r\n        super(nodes, marks, options ?? {});\r\n        this.inlines = [];\r\n    }\r\n\r\n    render(node, parent, index) {\r\n        super.render(node, parent, index);\r\n        const top = this.inlines[this.inlines.length - 1];\r\n        if(top?.start && top?.end) {\r\n            const { delimiter, start, end } = this.normalizeInline(top);\r\n            this.out = trimInline(this.out, delimiter, start, end);\r\n            this.inlines.pop();\r\n        }\r\n    }\r\n\r\n    markString(mark, open, parent, index) {\r\n        const info = this.marks[mark.type.name]\r\n        if(info.expelEnclosingWhitespace) {\r\n            if(open) {\r\n                this.inlines.push({\r\n                    start: this.out.length,\r\n                    delimiter: info.open,\r\n                });\r\n            } else {\r\n                const top = this.inlines.pop();\r\n                this.inlines.push({\r\n                    ...top,\r\n                    end: this.out.length,\r\n                });\r\n            }\r\n        }\r\n        return super.markString(mark, open, parent, index);\r\n    }\r\n\r\n    normalizeInline(inline) {\r\n        let { start, end } = inline;\r\n        while(this.out.charAt(start).match(/\\s/)) {\r\n            start++;\r\n        }\r\n        return {\r\n            ...inline,\r\n            start,\r\n        }\r\n    }\r\n}\r\n","import { Fragment } from \"@tiptap/pm/model\";\r\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\r\n\r\n\r\nexport default Mark.create({\r\n    name: 'markdownHTMLMark',\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {\r\n                    open(state, mark)  {\r\n                        if(!this.editor.storage.markdown.options.html) {\r\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\r\n                            return '';\r\n                        }\r\n                        return getMarkTags(mark)?.[0] ?? '';\r\n                    },\r\n                    close(state, mark) {\r\n                        if(!this.editor.storage.markdown.options.html) {\r\n                            return '';\r\n                        }\r\n                        return getMarkTags(mark)?.[1] ?? '';\r\n                    },\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nfunction getMarkTags(mark) {\r\n    const schema = mark.type.schema;\r\n    const node = schema.text(' ', [mark]);\r\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\r\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\r\n    return match ? [match[1], match[2]] : null;\r\n}\r\n","\r\n\r\nexport function elementFromString(value) {\r\n    // add a wrapper to preserve leading and trailing whitespace\r\n    const wrappedValue = `<body>${value}</body>`\r\n\r\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\r\n}\r\n\r\nexport function escapeHTML(value) {\r\n    return value\r\n        ?.replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\n\r\nexport function extractElement(node) {\r\n    const parent = node.parentElement;\r\n    const prepend = parent.cloneNode();\r\n\r\n    while(parent.firstChild && parent.firstChild !== node) {\r\n        prepend.appendChild(parent.firstChild);\r\n    }\r\n\r\n    if(prepend.childNodes.length > 0) {\r\n        parent.parentElement.insertBefore(prepend, parent);\r\n    }\r\n    parent.parentElement.insertBefore(node, parent);\r\n    if(parent.childNodes.length === 0) {\r\n        parent.remove();\r\n    }\r\n}\r\n\r\nexport function unwrapElement(node) {\r\n    const parent = node.parentNode;\r\n\r\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\r\n\r\n    parent.removeChild(node);\r\n}\r\n","import { Fragment } from \"@tiptap/pm/model\";\r\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\r\nimport { elementFromString } from \"../../util/dom\";\r\n\r\n\r\nexport default Node.create({\r\n    name: 'markdownHTMLNode',\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent) {\r\n                    if(this.editor.storage.markdown.options.html) {\r\n                        state.write(serializeHTML(node, parent));\r\n                    } else {\r\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\r\n                        state.write(`[${node.type.name}]`);\r\n                    }\r\n                    if(node.isBlock) {\r\n                        state.closeBlock(node);\r\n                    }\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n\r\nfunction serializeHTML(node, parent) {\r\n    const schema = node.type.schema;\r\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\r\n\r\n    if(node.isBlock && (parent instanceof Fragment || parent.type.name === schema.topNodeType.name)) {\r\n        return formatBlock(html);\r\n    }\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * format html block as per the commonmark spec\r\n */\r\nfunction formatBlock(html) {\r\n    const dom = elementFromString(html);\r\n    const element = dom.firstElementChild;\r\n\r\n    element.innerHTML = element.innerHTML.trim()\r\n        ? `\\n${element.innerHTML}\\n`\r\n        : `\\n`;\r\n\r\n    return element.outerHTML;\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Blockquote = Node.create({\r\n    name: 'blockquote',\r\n});\r\n\r\nexport default Blockquote.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst BulletList = Node.create({\r\n    name: 'bulletList',\r\n});\r\n\r\nexport default BulletList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst CodeBlock = Node.create({\r\n    name: 'codeBlock',\r\n});\r\n\r\nexport default CodeBlock.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\r\n                    state.text(node.textContent, false);\r\n                    state.ensureNewLine();\r\n                    state.write(\"```\");\r\n                    state.closeBlock(node);\r\n                },\r\n                parse: {\r\n                    setup(markdownit) {\r\n                        markdownit.set({\r\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\r\n                        });\r\n                    },\r\n                    updateDOM(element) {\r\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst HardBreak = Node.create({\r\n    name: 'hardBreak',\r\n});\r\n\r\nexport default HardBreak.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.hard_break,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Heading = Node.create({\r\n    name: 'heading',\r\n});\r\n\r\nexport default Heading.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.heading,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst HorizontalRule = Node.create({\r\n    name: 'horizontalRule',\r\n});\r\n\r\nexport default HorizontalRule.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Image = Node.create({\r\n    name: 'image',\r\n});\r\n\r\nexport default Image.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.image,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst ListItem = Node.create({\r\n    name: 'listItem',\r\n});\r\n\r\nexport default ListItem.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.list_item,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst OrderedList = Node.create({\r\n    name: 'orderedList',\r\n});\r\n\r\nexport default OrderedList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.ordered_list,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Paragraph = Node.create({\r\n    name: 'paragraph',\r\n});\r\n\r\nexport default Paragraph.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","\r\n\r\nexport function childNodes(node) {\r\n    return node?.content?.content ?? [];\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\nimport { childNodes } from \"../../util/prosemirror\";\r\nimport HTMLNode from './html';\r\n\r\nconst Table = Node.create({\r\n    name: 'table',\r\n});\r\n\r\nexport default Table.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent) {\r\n                    if(!isMarkdownSerializable(node)) {\r\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\r\n                        return;\r\n                    }\r\n                    node.forEach((row, p, i) => {\r\n                        state.write('| ');\r\n                        row.forEach((col, p, j) => {\r\n                            if(j) {\r\n                                state.write(' | ');\r\n                            }\r\n                            const cellContent = col.firstChild;\r\n                            if(cellContent.textContent.trim()) {\r\n                                state.renderInline(cellContent);\r\n                            }\r\n                        });\r\n                        state.write(' |')\r\n                        state.ensureNewLine();\r\n                        if(!i) {\r\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\r\n                            state.write(`| ${delimiterRow} |`);\r\n                            state.ensureNewLine();\r\n                        }\r\n                    });\r\n                    state.closeBlock(node);\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\nfunction hasSpan(node) {\r\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\r\n}\r\n\r\nfunction isMarkdownSerializable(node) {\r\n    const rows = childNodes(node);\r\n    const firstRow = rows[0];\r\n    const bodyRows = rows.slice(1);\r\n\r\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell) || cell.childCount > 1)) {\r\n        return false;\r\n    }\r\n\r\n    if(bodyRows.some(row =>\r\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell) || cell.childCount > 1)\r\n    )) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst TaskItem = Node.create({\r\n    name: 'taskItem',\r\n});\r\n\r\nexport default TaskItem.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\r\n                    state.write(`${check} `);\r\n                    state.renderContent(node);\r\n                },\r\n                parse: {\r\n                    updateDOM(element) {\r\n                        [...element.querySelectorAll('.task-list-item')]\r\n                            .forEach(item => {\r\n                                const input = item.querySelector('input');\r\n                                item.setAttribute('data-type', 'taskItem');\r\n                                if(input) {\r\n                                    item.setAttribute('data-checked', input.checked);\r\n                                    input.remove();\r\n                                }\r\n                            });\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import taskListPlugin from \"markdown-it-task-lists\";\r\nimport { Node } from \"@tiptap/core\";\r\nimport BulletList from \"./bullet-list\";\r\n\r\n\r\nconst TaskList = Node.create({\r\n    name: 'taskList',\r\n});\r\n\r\nexport default TaskList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: BulletList.storage.markdown.serialize,\r\n                parse: {\r\n                    setup(markdownit) {\r\n                        markdownit.use(taskListPlugin);\r\n                    },\r\n                    updateDOM(element) {\r\n                        [...element.querySelectorAll('.contains-task-list')]\r\n                            .forEach(list => {\r\n                                list.setAttribute('data-type', 'taskList');\r\n                            });\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { escapeHTML } from \"../../util/dom\";\r\n\r\n\r\nconst Text = Node.create({\r\n    name: 'text',\r\n});\r\n\r\nexport default Text.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    state.text(escapeHTML(node.text));\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Bold = Mark.create({\r\n    name: 'bold',\r\n});\r\n\r\nexport default Bold.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.strong,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            },\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Code = Mark.create({\r\n    name: 'code',\r\n});\r\n\r\nexport default Code.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.code,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Italic = Mark.create({\r\n    name: 'italic',\r\n});\r\n\r\nexport default Italic.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.em,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Link = Mark.create({\r\n    name: 'link',\r\n});\r\n\r\nexport default Link.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.link,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\n\r\n\r\nconst Strike = Mark.create({\r\n    name: 'strike',\r\n});\r\n\r\nexport default Strike.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\n\r\n\r\nconst Underline = Mark.create({\r\n    name: 'underline',\r\n});\r\n\r\nexport default Underline.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {open: '__', close: '__', expelEnclosingWhitespace: true},\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","import Blockquote from \"./nodes/blockquote\";\r\nimport BulletList from \"./nodes/bullet-list\";\r\nimport CodeBlock from \"./nodes/code-block\";\r\nimport HardBreak from \"./nodes/hard-break\";\r\nimport Heading from \"./nodes/heading\";\r\nimport HorizontalRule from \"./nodes/horizontal-rule\";\r\nimport HTMLNode from \"./nodes/html\";\r\nimport Image from \"./nodes/image\";\r\nimport ListItem from \"./nodes/list-item\";\r\nimport OrderedList from \"./nodes/ordered-list\";\r\nimport Paragraph from \"./nodes/paragraph\";\r\nimport Table from \"./nodes/table\";\r\nimport TaskItem from \"./nodes/task-item\";\r\nimport TaskList from \"./nodes/task-list\";\r\nimport Text from \"./nodes/text\";\r\n\r\nimport Bold from \"./marks/bold\";\r\nimport Code from \"./marks/code\";\r\nimport HTMLMark from \"./marks/html\";\r\nimport Italic from \"./marks/italic\";\r\nimport Link from \"./marks/link\";\r\nimport Strike from \"./marks/strike\";\r\nimport Underline from \"./marks/underline\";\r\n\r\n\r\nexport default [\r\n    Blockquote,\r\n    BulletList,\r\n    CodeBlock,\r\n    HardBreak,\r\n    Heading,\r\n    HorizontalRule,\r\n    HTMLNode,\r\n    Image,\r\n    ListItem,\r\n    OrderedList,\r\n    Paragraph,\r\n    Table,\r\n    TaskItem,\r\n    TaskList,\r\n    Text,\r\n\r\n    Bold,\r\n    Code,\r\n    HTMLMark,\r\n    Italic,\r\n    Link,\r\n    Strike,\r\n    Underline,\r\n]\r\n","import markdownExtensions from \"../extensions\";\r\n\r\n\r\nexport function getMarkdownSpec(extension) {\r\n    const markdownSpec = extension.storage?.markdown;\r\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\r\n\r\n    if(markdownSpec || defaultMarkdownSpec) {\r\n        return {\r\n            ...defaultMarkdownSpec,\r\n            ...markdownSpec,\r\n        };\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { MarkdownSerializerState } from './state';\r\nimport HTMLMark from \"../extensions/marks/html\";\r\nimport HTMLNode from \"../extensions/nodes/html\";\r\nimport { getMarkdownSpec } from \"../util/extensions\";\r\nimport HardBreak from \"../extensions/nodes/hard-break\";\r\n\r\n\r\nexport class MarkdownSerializer {\r\n    /**\r\n     * @type {import('@tiptap/core').Editor}\r\n     */\r\n    editor = null;\r\n\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    serialize(content) {\r\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\r\n            hardBreakNodeName: HardBreak.name,\r\n        });\r\n\r\n        state.renderContent(content);\r\n\r\n        return state.out;\r\n    }\r\n\r\n    get nodes() {\r\n        return {\r\n            ...Object.fromEntries(\r\n                Object.keys(this.editor.schema.nodes)\r\n                    .map(name => [name, this.serializeNode(HTMLNode)])\r\n            ),\r\n            ...Object.fromEntries(\r\n                this.editor.extensionManager.extensions\r\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\r\n                    .map(extension => [extension.name, this.serializeNode(extension)])\r\n                ?? []\r\n            ),\r\n        };\r\n    }\r\n\r\n    get marks() {\r\n        return {\r\n            ...Object.fromEntries(\r\n                Object.keys(this.editor.schema.marks)\r\n                    .map(name => [name, this.serializeMark(HTMLMark)])\r\n            ),\r\n            ...Object.fromEntries(\r\n                this.editor.extensionManager.extensions\r\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\r\n                    .map(extension => [extension.name, this.serializeMark(extension)])\r\n                ?? []\r\n            ),\r\n        };\r\n    }\r\n\r\n    serializeNode(node) {\r\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\r\n    }\r\n\r\n    serializeMark(mark) {\r\n        const serialize = getMarkdownSpec(mark)?.serialize;\r\n        return serialize\r\n            ? {\r\n                ...serialize,\r\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\r\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\r\n            }\r\n            : null\r\n    }\r\n}\r\n\r\n","import markdownit from \"markdown-it\";\r\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\r\nimport { getMarkdownSpec } from \"../util/extensions\";\r\n\r\n\r\nexport class MarkdownParser {\r\n    /**\r\n     * @type {import('@tiptap/core').Editor}\r\n     */\r\n    editor = null;\r\n    /**\r\n     * @type {markdownit}\r\n     */\r\n    md = null;\r\n\r\n    constructor(editor, { html, linkify, breaks }) {\r\n        this.editor = editor;\r\n        this.md = markdownit({\r\n            html,\r\n            linkify,\r\n            breaks,\r\n        });\r\n    }\r\n\r\n    parse(content, { inline } = {}) {\r\n        if(typeof content === 'string') {\r\n            const renderer = this.md;\r\n\r\n            this.editor.extensionManager.extensions.forEach(extension =>\r\n                getMarkdownSpec(extension)?.parse?.setup?.call({ editor:this.editor, options:extension.options }, renderer)\r\n            );\r\n\r\n            const renderedHTML = renderer.render(content);\r\n            const element = elementFromString(renderedHTML);\r\n\r\n            this.editor.extensionManager.extensions.forEach(extension =>\r\n                getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor:this.editor, options:extension.options }, element)\r\n            );\r\n\r\n            this.normalizeDOM(element, { inline, content });\r\n\r\n            return element.innerHTML;\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    normalizeDOM(node, { inline, content }) {\r\n        this.normalizeBlocks(node);\r\n\r\n        // remove all \\n appended by markdown-it\r\n        node.querySelectorAll('*').forEach(el => {\r\n            if(el.nextSibling?.nodeType === Node.TEXT_NODE && !el.closest('pre')) {\r\n                el.nextSibling.textContent = el.nextSibling.textContent.replace(/^\\n/, '');\r\n            }\r\n        });\r\n\r\n        if(inline) {\r\n            this.normalizeInline(node, content);\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    normalizeBlocks(node) {\r\n        const blocks = Object.values(this.editor.schema.nodes)\r\n            .filter(node => node.isBlock);\r\n\r\n        const selector = blocks\r\n            .map(block => block.spec.parseDOM?.map(spec => spec.tag))\r\n            .flat()\r\n            .filter(Boolean)\r\n            .join(',');\r\n\r\n        if(!selector) {\r\n            return;\r\n        }\r\n\r\n        [...node.querySelectorAll(selector)].forEach(el => {\r\n            if(el.parentElement.matches('p')) {\r\n                extractElement(el);\r\n            }\r\n        });\r\n    }\r\n\r\n    normalizeInline(node, content) {\r\n        if(node.firstElementChild?.matches('p')) {\r\n            const firstParagraph = node.firstElementChild;\r\n            const { nextSibling, nextElementSibling } = firstParagraph;\r\n            const startSpaces = content.match(/^\\s+/)?.[0] ?? '';\r\n            const endSpaces = !nextElementSibling\r\n                ? content.match(/\\s+$/)?.[0] ?? ''\r\n                : '';\r\n\r\n            if(content.match(/^\\n\\n/)) {\r\n                firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\r\n                return;\r\n            }\r\n\r\n            unwrapElement(firstParagraph);\r\n\r\n            node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\r\n        }\r\n    }\r\n}\r\n\r\n","import { Extension } from \"@tiptap/core\";\r\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\r\nimport { DOMParser } from '@tiptap/pm/model';\r\nimport { elementFromString } from \"../../util/dom\";\r\n\r\nexport const MarkdownClipboard = Extension.create({\r\n    name: 'markdownClipboard',\r\n    addOptions() {\r\n        return {\r\n            transformPastedText: false,\r\n            transformCopiedText: false,\r\n        }\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new Plugin({\r\n                key: new PluginKey('markdownClipboard'),\r\n                props: {\r\n                    clipboardTextParser: (text, context, plainText) => {\r\n                        if(plainText || !this.options.transformPastedText) {\r\n                            return null; // pasting with shift key prevents formatting\r\n                        }\r\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\r\n                        return DOMParser.fromSchema(this.editor.schema)\r\n                            .parseSlice(elementFromString(parsed), {\r\n                                preserveWhitespace: true,\r\n                                context,\r\n                            });\r\n                    },\r\n                    /**\r\n                     * @param {import('prosemirror-model').Slice} slice\r\n                     */\r\n                    clipboardTextSerializer: (slice) => {\r\n                        if(!this.options.transformCopiedText) {\r\n                            return null;\r\n                        }\r\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\r\n                    },\r\n                },\r\n            })\r\n        ]\r\n    }\r\n})\r\n","import { Extension, extensions } from '@tiptap/core';\r\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\r\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\r\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\r\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\r\n\r\nexport const Markdown = Extension.create({\r\n    name: 'markdown',\r\n    priority: 50,\r\n    addOptions() {\r\n        return {\r\n            html: true,\r\n            tightLists: true,\r\n            tightListClass: 'tight',\r\n            bulletListMarker: '-',\r\n            linkify: false,\r\n            breaks: false,\r\n            transformPastedText: false,\r\n            transformCopiedText: false,\r\n        }\r\n    },\r\n    addCommands() {\r\n        const commands = extensions.Commands.config.addCommands();\r\n        return {\r\n            setContent: (content, emitUpdate, parseOptions) => (props) => {\r\n                return commands.setContent(\r\n                    props.editor.storage.markdown.parser.parse(content),\r\n                    emitUpdate,\r\n                    parseOptions\r\n                )(props);\r\n            },\r\n            insertContentAt: (range, content, options) => (props) => {\r\n                return commands.insertContentAt(\r\n                    range,\r\n                    props.editor.storage.markdown.parser.parse(content, { inline: true }),\r\n                    options\r\n                )(props);\r\n            },\r\n        }\r\n    },\r\n    onBeforeCreate() {\r\n        this.editor.storage.markdown = {\r\n            options: { ...this.options },\r\n            parser: new MarkdownParser(this.editor, this.options),\r\n            serializer: new MarkdownSerializer(this.editor),\r\n            getMarkdown: () => {\r\n                return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\r\n            },\r\n        }\r\n        this.editor.options.initialContent = this.editor.options.content;\r\n        this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\r\n    },\r\n    onCreate() {\r\n        this.editor.options.content = this.editor.options.initialContent;\r\n        delete this.editor.options.initialContent;\r\n    },\r\n    addStorage() {\r\n        return {\r\n            /// storage will be defined in onBeforeCreate() to prevent initial object overriding\r\n        }\r\n    },\r\n    addExtensions() {\r\n        return [\r\n            MarkdownTightLists.configure({\r\n                tight: this.options.tightLists,\r\n                tightClass: this.options.tightListClass,\r\n            }),\r\n            MarkdownClipboard.configure({\r\n                transformPastedText: this.options.transformPastedText,\r\n                transformCopiedText: this.options.transformCopiedText,\r\n            }),\r\n        ]\r\n    },\r\n});\r\n"],"names":["MarkdownTightLists","Extension","create","name","addOptions","tight","tightClass","listTypes","addGlobalAttributes","types","options","attributes","default","parseHTML","element","getAttribute","querySelector","renderHTML","class","addCommands","_this","toggleTight","arguments","length","undefined","_ref","editor","commands","isActive","attrs","getAttributes","updateAttributes","some","md","markdownit","scanDelims","text","pos","inline","State","prototype","call","src","posMax","state","shiftDelim","delim","start","offset","res","substring","trimStart","from","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","BaseMarkdownSerializerState","constructor","nodes","marks","inlines","render","node","parent","index","top","end","delimiter","normalizeInline","out","pop","markString","mark","open","info","type","expelEnclosingWhitespace","push","charAt","match","Mark","addStorage","markdown","serialize","_getMarkTags$","_getMarkTags","storage","html","console","warn","getMarkTags","close","_getMarkTags$2","_getMarkTags2","parse","schema","getHTMLFromFragment","Fragment","elementFromString","value","wrappedValue","window","DOMParser","parseFromString","body","escapeHTML","replace","extractElement","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","insertBefore","remove","unwrapElement","parentNode","removeChild","Node","write","serializeHTML","isBlock","closeBlock","topNodeType","formatBlock","dom","firstElementChild","innerHTML","trim","outerHTML","Blockquote","extend","defaultMarkdownSerializer","blockquote","BulletList","renderList","bulletListMarker","CodeBlock","language","textContent","ensureNewLine","setup","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","HardBreak","hard_break","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","ordered_list","Paragraph","paragraph","_node$content$content","_node$content","content","Table","isMarkdownSerializable","HTMLNode","forEach","row","p","i","col","j","cellContent","renderInline","delimiterRow","Array","childCount","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","slice","cell","TaskItem","check","checked","renderContent","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","strong","Code","code","Italic","em","Link","link","Strike","Underline","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownSerializer","hardBreakNodeName","_this$editor$extensio","Object","fromEntries","keys","serializeNode","extensionManager","extensions","filter","_this$editor$extensio2","serializeMark","_getMarkdownSpec","bind","_getMarkdownSpec2","MarkdownParser","linkify","breaks","renderer","renderedHTML","normalizeDOM","_ref2","normalizeBlocks","el","_el$nextSibling","nextSibling","nodeType","TEXT_NODE","closest","blocks","values","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextElementSibling","startSpaces","endSpaces","MarkdownClipboard","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","key","PluginKey","props","clipboardTextParser","context","plainText","parsed","parser","fromSchema","parseSlice","preserveWhitespace","clipboardTextSerializer","serializer","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}